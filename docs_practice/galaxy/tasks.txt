131.Linux միջավայրում հայտարարաել environment, և համապատասխան հրամանի միջոցով ստուգել առկայությունը։ Օգտագործել հայտարարած environment-ը C-ական կոդում և համապատասխան ֆունկցիայի միջոցով տպել էկրանին environment-ի արժեքը։

132.Գրել ծրագիր, որը ծրագրի կատարման ընթացքում կստեղծի նոր process, որպես child, և child process-ը կսկսի կատարվել ստեղծվելու հաջորդ տողից։ Parent process-ը պետք է տպի Parent: PID, իսկ Child-ը՝ Child: PID։

133.Իրականացնել ֆունկցիա, որը կստանա process-ների count և կստեղծի child process-ներ count հատ և յուրաքանչյուրը մինչև հաջորդ process-ի ստեղծվելը կավարտի իր աշխատանքը։ Էկրանին տպել child process-ների PID-ները։

134.Իրականացնել տարբեր ֆունկցիաներ, որոնց կանչելով մեր process-ի համար, կփոխի մեր process-ի state-ը, ըստ Linux միջավայրում առկա Process State-երի։

135.Գրել ծրագիր, որը կստեղծի 2 child process, որոնցից յուրաքանչյուրը կկանչի տարբեր ֆունկցիաներ։ Ֆունկցիաներից մեկը կլինի դինամիկ երկչափ զանգվածի գլխավոր անկյունակծի տարրերը տպել էկրանին, մյուս ֆունկցիան կհաշվի թվի ֆակտորիալ ռեկուրսիվ տարբերակով։ Հաշվի առնել այն, որ Parent process-ը պետք է սպասի մինչև child process-ները ավարտվեն։ Կարող ել օգտվել waitpid() ֆունկցիայից։ Էկրանին տպել յուրաքանչյուր process-ի PID-ները։

136.Գրել ծրագիր, որն ինքն իրեն կդադարեցնի պարզ հաղորդագրություն տպելուց հետո:

137.Գրել ծրագիր  որը կստեցծի երկու process։ Գլոբալ տիրույթում հայտաևրարել փոփոխական։ Մի process-ը ավելացնում է գլոբալ տիրույթում հայտարարված փոփոխականի արժեքը, իսկ մյուս process-ը սպասում է, որ փոփոխականը հասնի որոշակի արժեքի, նախքան շարունակելը: Երբ փոփոխականը հասնի որոշակի արժեքի դադարեցնել 2 process-ները։ 

138.Գրել ծրագիր, որը կստեղծի 3 child process և կսպասի մինչև 3-ից որևէ մեկը կավարտի իր աշխատանքը, այն child process-ը որը առաջինը կավարտի իր աշխատանքը կտպի էկրանին այդ process-ի pid-ին։ Երբ գտաք որ process-ն է ավարտվել սպանել մյուս 2 process-ներին ևս։

139.Գրել ծրագիր, որը կստեղծի 3 child process սորտավորել pid-ները։

Exploring Command Line Arguments in C Programs
140.Գրել ծրագիր, որը կտպի էկրանին argv-ի պարունակությունը։

141.Գրել ծրագիր, որի կատարման արդյունքում գրելով ./a.out 1 2 3 4 … n, կտպի էկրանին a.out-ից հետո գրված թվերի գումարը։

142.Գրել ծրագիր, որի կատարման արդյունքում գրելով ./a.out 1 2 3 4 … n, փոխանցված արգումնեները կլցվեն դինամիկ հիշողությունից վերցրած զանգվածի մեջ և յուրաքանչյուր էլեմենտի արժեքը կմեծանա 5-ով։

Interprocess Communication Using Shared Memory

143.Գրել ծրագիր, որը թույլ կտա parent process-ին և child process-ին հաղորդակցվել միմյանց հետ: Օգտագործել shared memory (shm_open և mmap) shared հիշողություն ստեղծելու համար:

144.Իրականացնել  ֆունկցիա shared memory-ից հաղորդագրություններ ստանալու համար և տպելու համար:


Exploring Exec and System Calls in C Programs


145.Գրել ծրագիր, որը կփոխարինի ներկայիս process-ի աշխատանքը ls ծրագրով, և -l option-ով։ 

146.Օգտագործելով execv, գրել ծրագիր որը կտպի էկրանին  bin/ps թղթապանակում գտնվող ps -ef հրամանի կատարման արդյունքը։

147. C-ական կոդի մեջից ստեղծել environment փոփոխական նոր անունով, և տպել էկրանին փոփոխականի պարունակոթյունը կոդի միջոցով։

148.Գրել ծրագիր, որը C-ական կոդի միջոցով կբացի google-chrome-ը։

149.Գրել ծրագիր, որը օգտվողից կսպասի մուտքագրման։ Այն ծրագրի անունը, որը կմուտքագրի օգտվողը կբացվի։ Կարող եք օգտվել system() հրամանից shell-ի հրամանները կատարելու համար։

150.Ստեղծել երկու C-ական ֆայլ(ծրագիր), առաջին ծրագրի կատարման ժամանակ համապատասխան system call-ի արդյունքում կդադարեցվի առաջին ծրագիրի աշխատանքը և կսկսի կատարվել 2-րդ ֆայլում գրված կոդը։ 

151.Գրել ծրագիր, որի կատարման ժամանակ թույլ կտա օգտվողին մուտքագրել Linux-ական հրամաններ, այնքան ժամանակ քանի դեռ չի մուտքագրել exit բառը։ Իրականացնել ֆունկցիա, որը մուտքագրված հրամանը կստանա որպես արգումնետ և կստեղծի child պրոցես, որի կատարման արդյունքում կտեսնենք հրամանի կատարման արդյունքը տերմինալում։

Managing Process Priority in C Programs

152.Գրել ծրագիր, որը կտպի էկրանին ընթացիկ process-ի Priority-ն։

153.Գրել ծրագիր, որը ընթացիկ process-ի առաջնահերթությունը սահմանում է նոր արժեքով՝ օգտագործելով setpriority ֆունկցիան: Priority-ն սահմանելուց հետո տպել թարմացված priority-ն:

154.Գրել ծրագիր, որը ընթացիկ PID-ից մինչև ընթացիկ PID + 5 յուրաքանչյուր process-ի priority-ն տպում է էկրանին։

155.Գրել ծրագիր, որը կստեղծպ երկու Child process-ներ: Տպել հաղորդագրություն, որը ցույց է տալիս, թե որ child process-ն ունի ավելի priority:
